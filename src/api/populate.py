import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np
import random


# def database_connection_url():
#     dotenv.load_dotenv()
#     DB_USER: str = os.environ.get("POSTGRES_USER")
#     DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
#     DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
#     DB_PORT: str = os.environ.get("POSTGRES_PORT")
#     DB_NAME: str = os.environ.get("POSTGRES_DB")
#     return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine("postgresql://postgres:postgres@127.0.0.1:54322/postgres", use_insertmanyvalues=True)
substances = ['Siltrite', 'Garnox', 'Lumidium', 'Vibranium', 'Starstone']
substances_prices = [2, 3, 5, 8, 15]
narcos = ['SLT', 'Goxin', 'Splice', 'Vibe', 'Starbliss', 'Cocaine']
narcos_prices = [8, 12, 20, 40, 30, 75]
planets = ['Pyre', 'Lyxion IV', 'Ecliptix', 'Zentharis', 'Sylvaria']

with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS inventory;
    DROP TABLE IF EXISTS market;
    DROP TABLE IF EXISTS transaction_items;
    DROP TABLE IF EXISTS transactions;
    DROP TABLE IF EXISTS bids;
    DROP TABLE IF EXISTS citizens;
    DROP TABLE IF EXISTS substances;
    DROP TABLE IF EXISTS narcos;
    DROP TABLE IF EXISTS planets;
    DROP TABLE IF EXISTS wars;

    create table
    public.narcos (
        id bigint generated by default as identity,
        name text null,
        price integer null,
        rarity integer null,
        constraint narcos_pkey primary key (id)
    ) tablespace pg_default;

    create table
    public.wars (
        id integer generated by default as identity,
        planet_1 text not null default ''::text,
        planet_2 text not null default ''::text,
        citizen_id integer null default 0,
        min_bid integer null default 0,
        constraint wars_pkey primary key (id)
    ) tablespace pg_default;

    create table
    public.planets (
        planet text not null,
        war_id integer not null,
        constraint planets_pkey primary key (planet),
        constraint planets_war_id_fkey foreign key (war_id) references wars (id)
    ) tablespace pg_default;
                                    
    create table
    public.citizens (
        id integer generated by default as identity,
        name text not null default ''::text,
        role text not null default ''::text,
        strikes integer not null default 0,
        planet text not null,
        password text null,
        coolness integer not null default 0,
        constraint civilians_pkey primary key (id),
        constraint citizens_planet_fkey foreign key (planet) references planets (planet)
    ) tablespace pg_default;

    create table
    public.transactions (
        transaction_id integer generated by default as identity,
        buyer_id integer null,
        constraint transactions_pkey primary key (transaction_id),
        constraint transactions_buyer_id_fkey foreign key (buyer_id) references citizens (id)
    ) tablespace pg_default;      
                                 
    create table
    public.transaction_items (
        transaction_id integer not null,
        listing_id integer not null default 0,
        constraint transaction_items_pkey primary key (transaction_id),
        constraint transaction_items_transaction_id_fkey foreign key (transaction_id) references transactions (transaction_id)
    ) tablespace pg_default;

    create table
    public.inventory (
        citizen_id integer not null,
        type text not null default ''::text,
        quantity integer null default 0,
        name text not null default ''::text,
        status text null,
        id integer generated by default as identity,
        constraint inventory_pkey primary key (id),
        constraint unique_entry unique (
        citizen_id,
        type,
        name,
        status
        ),
        constraint public_inventory_citizen_id_fkey foreign key (citizen_id) references citizens (id)
    ) tablespace pg_default; 
        
    create table
    public.market (
        id integer generated by default as identity,
        name text not null default ''::text,
        type text not null default ''::text,
        price integer not null default 0,
        quantity integer not null default 0,
        seller_id integer null,
        timestamp timestamp without time zone null default now(),
        constraint market_pkey primary key (id),
        constraint market_seller_id_fkey foreign key (seller_id) references citizens (id)
    ) tablespace pg_default;
                                 
    create table
    public.substances (
        id integer generated by default as identity,
        name text null,
        price integer null,
        rarity integer null,
        planet text null,
        quantity integer null default 0,
        to_narco integer null default 10,
        constraint substances_pkey primary key (id),
        constraint substances_planet_fkey foreign key (planet) references planets (planet)
    ) tablespace pg_default;
                                 
    create table
    public.bids (
        citizen_id integer not null default 0,
        war_id integer not null default 0,
        bid_amount integer null default 0,
        planet text null default ''::text,
        constraint bids_pkey primary key (citizen_id, war_id),
        constraint bids_citizen_id_fkey foreign key (citizen_id) references citizens (id),
        constraint bids_planet_fkey foreign key (planet) references planets (planet),
        constraint bids_war_id_fkey foreign key (war_id) references wars (id) on update cascade on delete cascade
    ) tablespace pg_default;
    """))
    
    # populate initial govt citizen and wars
    conn.execute(sqlalchemy.text("""INSERT INTO wars (planet_1, planet_2, citizen_id, min_bid) VALUES ('peace', 'peace', 0, 0);"""))
    conn.execute(sqlalchemy.text("insert into planets (planet, war_id) values ('Lyxion IV', 1);"))
    conn.execute(sqlalchemy.text("insert into planets (planet, war_id) values ('Zentharis', 1);"))
    conn.execute(sqlalchemy.text("insert into planets (planet, war_id) values ('Sylvaria', 1);"))
    conn.execute(sqlalchemy.text("insert into planets (planet, war_id) values ('Pyre', 1);"))
    conn.execute(sqlalchemy.text("insert into planets (planet, war_id) values ('Ecliptix', 1);"))

    conn.execute(sqlalchemy.text("""INSERT INTO citizens (name, role, strikes, planet, password, coolness) VALUES ('governor', 'govt', 0, 'Ecliptix', 'password', 0);"""))
    conn.execute(sqlalchemy.text("""INSERT INTO wars (planet_1, planet_2, citizen_id, min_bid) VALUES ('Lyxion IV', 'Sylvaria', 1, 100);"""))
    conn.execute(sqlalchemy.text("""INSERT INTO wars (planet_1, planet_2, citizen_id, min_bid) VALUES ('Zentharis', 'Pyre', 1, 100);"""))
    conn.execute(sqlalchemy.text("""INSERT INTO inventory (citizen_id, type, quantity) VALUES (1, 'voidex', 100);"""))

    conn.execute(sqlalchemy.text("insert into narcos (name, price, rarity) values ('SLT', 8, 1);"))
    conn.execute(sqlalchemy.text("insert into narcos (name, price, rarity) values ('Goxin', 12, 2);"))
    conn.execute(sqlalchemy.text("insert into narcos (name, price, rarity) values ('Splice', 20, 3);"))
    conn.execute(sqlalchemy.text("insert into narcos (name, price, rarity) values ('Starbliss', 30, 4);"))
    conn.execute(sqlalchemy.text("insert into narcos (name, price, rarity) values ('Vibe', 40, 5);"))
    conn.execute(sqlalchemy.text("insert into narcos (name, price, rarity) values ('Cocaine', 75, 6);"))

    conn.execute(sqlalchemy.text("insert into substances (name, price, rarity, planet, quantity, to_narco) values ('Siltrite', 2, 1, 'Lyxion IV', 1000, 10);"))
    conn.execute(sqlalchemy.text("insert into substances (name, price, rarity, planet, quantity, to_narco) values ('Garnox', 3, 2, 'Sylvaria', 1000, 10);"))
    conn.execute(sqlalchemy.text("insert into substances (name, price, rarity, planet, quantity, to_narco) values ('Lumidium', 5, 3, 'Pyre', 1000, 10);"))
    conn.execute(sqlalchemy.text("insert into substances (name, price, rarity, planet, quantity, to_narco) values ('Vibranium', 8, 4, 'Ecliptix', 1000, 10);"))
    conn.execute(sqlalchemy.text("insert into substances (name, price, rarity, planet, quantity, to_narco) values ('Starstone', 15, 5, 'Zentharis', 1000, 10);"))

num_citizens = 160000
fake = Faker()
posts_sample_distribution = np.random.default_rng().negative_binomial(0.04, 0.01, num_citizens)
narcos_sample_distribution = np.random.choice([0, 1, 2, 3, 4, 5],
                                                 num_citizens,
                                                p=[0.15, 0.2, 0.1, 0.3, 0.1, 0.15])
substances_sample_distribution = np.random.choice([0, 1, 2, 3, 4],
                                                 num_citizens,
                                                p=[0.10, 0.25, 0.15, 0.3, 0.2])

total_listings = 0
total_inventory = 0
total_bids = 0
total_transactions = 0

# create fake citizens, inventories, listings, and bids
with engine.begin() as conn:
    print("creating black market economy...")
    listings = []
    for i in range(num_citizens):
        if (i % 10 == 0):
            print(i)
        
        name = fake.name()
        password = fake.password(8)
        role = fake.random_element(elements=('civilian', 'miner', 'chemist', 'govt'))
        planet = fake.random_element(elements=('Pyre', 'Lyxion IV', 'Ecliptix', 'Zentharis', 'Sylvaria'))

        citizen_id = conn.execute(sqlalchemy.text("""
        INSERT INTO citizens (name, role, strikes, planet, password, coolness) VALUES (:name, :role, 0, :planet, :password, 0) RETURNING id;
        """), {"name": name, "role": role, "planet": planet, "password": password}).scalar_one()

        narco = narcos[narcos_sample_distribution[i]]
        substance = substances[substances_sample_distribution[i]]

        war_id = random.randint(2, 3)
        bet = random.randint(0, 1)

        # get the planets
        results = conn.execute(
            sqlalchemy.text(
                """ 
                select
                    planet_1,
                    planet_2
                from wars
                where id = :war_id
                """
            ), [{"war_id": war_id}]
        ).first()

        # assign the planet to bet on
        bet_planet = results[0] if bet == 0 else results[1]

        num_narcos = random.randint(100, 500)
        num_substances = random.randint(100, 500)
        num_voidex = random.randint(100, 1000)

        conn.execute(sqlalchemy.text("""
            INSERT INTO inventory (citizen_id, type, quantity) VALUES (:cit_id, 'voidex', :num_voidex);
            """), {"cit_id": citizen_id, "num_voidex": num_voidex})
        conn.execute(sqlalchemy.text("""
            INSERT INTO bids (citizen_id, war_id, bid_amount, planet) VALUES (:cit_id, :war_id, :bid_amount, :planet);
            """), {"cit_id": citizen_id, "war_id": war_id, "bid_amount": random.randint(100, num_voidex), "planet": bet_planet})
        t_id = conn.execute(sqlalchemy.text("""
            INSERT INTO transactions (buyer_id) VALUES (:cit_id) RETURNING transaction_id;
            """), {"cit_id": citizen_id}).scalar_one()
        conn.execute(sqlalchemy.text("""
            INSERT INTO transaction_items (transaction_id, listing_id) VALUES (:t_id, :listing_id);
            """), {"t_id": t_id, "listing_id": i})

        total_inventory += 1
        total_bids += 1
        total_transactions += 2

        if role == "govt" or role == "civilian":
            conn.execute(sqlalchemy.text("""
            INSERT INTO inventory (citizen_id, type, quantity, name, status) VALUES (:cit_id, 'narcos', :num_narcos, :narco, 'owned');
            """), {"cit_id": citizen_id, "num_narcos": num_narcos, "narco": narco})

            total_inventory += 1

        elif role == "chemist":    
            conn.execute(sqlalchemy.text("""
            INSERT INTO inventory (citizen_id, type, quantity, name, status) VALUES (:cit_id, 'narcos', :num_narcos, :narco, 'selling');
            """), {"cit_id": citizen_id, "num_narcos": num_narcos, "narco": narco})
            conn.execute(sqlalchemy.text("""
            INSERT INTO market (name, type, price, quantity, seller_id) VALUES (:narco, 'narcos', :price, :num_narcos, :cit_id);
            """), {"narco": narco, "price": narcos_prices[narcos_sample_distribution[i]], "num_narcos": num_narcos, "cit_id": citizen_id})

            total_inventory += 1
            total_listings += 1
        elif role == "miner":
            conn.execute(sqlalchemy.text("""
            INSERT INTO inventory (citizen_id, type, quantity, name, status) VALUES (:cit_id, 'narcos', :num_narcos, :narco, 'owned');
            """), {"cit_id": citizen_id, "num_narcos": num_narcos, "narco": narco})
            conn.execute(sqlalchemy.text("""
            INSERT INTO inventory (citizen_id, type, quantity, name, status) VALUES (:cit_id, 'substances', :num_substances, :substance, 'selling');
            """), {"cit_id": citizen_id, "num_substances": num_substances, "substance": substance})
            conn.execute(sqlalchemy.text("""
            INSERT INTO market (name, type, price, quantity, seller_id) VALUES (:substance, 'substances', :price, :num_substances, :cit_id);
            """), {"substance": substance, "price": substances_prices[substances_sample_distribution[i]], "num_substances": num_substances, "cit_id": citizen_id})

            total_inventory += 2
            total_listings += 1

    print("total listings: ", total_listings)
    print("total inventory: ", total_inventory)
    print("total bids: ", total_bids)
    print("total transactions: ", total_transactions)
    print("total rows added: ", total_inventory + total_bids + total_listings + num_citizens + total_transactions)